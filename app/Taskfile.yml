version: 3 # Docs: <https://taskfile.dev/usage/>

vars:
  UID: {sh: id -u}
  GID: {sh: id -g}
  DC_RUN_ARGS: --rm --user "{{ .UID }}:{{ .GID }}"

tasks:
  go:generate:
    desc: Run code generation for Go
    cmds:
      - go generate ./...

  go:build:
    desc: Build app binary file(s)
    deps: [go:generate]
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} -e "CGO_ENABLED=0" --no-deps go go build {{ .BUILD_ARGS }} ./cmd/mkcert
      - docker-compose run {{ .DC_RUN_ARGS }} -e "CGO_ENABLED=0" --no-deps go go build {{ .BUILD_ARGS }} ./cmd/app
      - ./app --version
    vars:
      VERSION: {sh: git rev-parse HEAD}
      LDFLAGS: -s -w -X gh.tarampamp.am/indocker-app/app/internal/version.version={{ .VERSION }}
      BUILD_ARGS: -trimpath -ldflags "{{ .LDFLAGS }}"

  go:test:
    desc: Run app tests
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps go gotestsum --format testname -- -race -timeout 10s ./...

  go:lint:
    desc: Lint the app sources
    cmds:
      - docker-compose run --rm golint golangci-lint run

  go:fmt:
    desc: Run source code formatting tools
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps go gofmt -s -w -d .
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps go goimports -d -w .
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps go go mod tidy

  go:shell:
    desc: Run a shell in the Go container
    silent: true
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} go sh

  k6:install:
    desc: Install K6 dependencies
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} -w /src/test/k6 --entrypoint npm --no-deps node install

  k6:run:
    desc: Run K6 tests
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} k6 run ./test/k6/functional.js

  k6:shell:
    desc: Run a shell in the K6 container
    silent: true
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} --entrypoint sh k6

  node:install:
    desc: Install Node.js dependencies
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps node npm install

  node:lint:
    desc: Lint the Node.js sources
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps node npm run lint

  node:fmt:
    desc: Lint the Node.js sources
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps node npm run format

  node:build:
    desc: Build the Node.js sources
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps node npm run build

  node:shell:
    desc: Run a shell in the Node.js container
    silent: true
    cmds:
      - docker-compose run {{ .DC_RUN_ARGS }} --no-deps node sh

  test:
    desc: Run all tests and linters
    deps: [go:lint, go:test, node:lint]

  fmt:
    desc: Run all formatters
    deps: [go:fmt, node:fmt]

  default:
    desc: Start the development environment
    ignore_error: true
    cmds:
      - docker-compose up --detach app monitor whoami
      - defer: docker-compose down -t 2 --remove-orphans
      - docker-compose logs -f app monitor
